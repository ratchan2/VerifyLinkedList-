(declare-const s0 State)
(declare-const s1 State)
(declare-const s2 State)
(declare-const s3 State)
(declare-const s4 State)


(declare-const k Int)
;(declare-const z Node)

(declare-const prev Node)
(declare-const curr Node)
(declare-const temp Node)

;arbitrary integer keys
(declare-const k1 Int)
(declare-const k2 Int)


;temporary nodes used in proofs
(declare-const z Node)

;assumptions on state

(assert (< (key prev s0) target_key))

;(assert (admissible nil s0))
(assert (admissible prev s0))
(assert (next prev curr s0))
(assert (= (key prev s0) k1))
(assert (= (key curr s0) k2))
(assert (member k1 s0))
(assert (member k2 s0))


;;now for proving that update works
(assert (not (= prev curr)))
(assert (not (= curr z)))
(assert (not (= prev z)))

(assert (succ s0 s1))
(assert (succ s1 s2))
(assert (succ s2 s3))
(assert (succ s3 s4))


(assert (< (key curr s0) target_key))
(assert (exec-assign prev curr s0))
(assert (advance-ptr curr s1))

(assert (not (< (key curr s2) target_key)))
(assert (= (key curr s2) target_key))

(assert (next curr z s2))
(assert (link-next z prev s2))



